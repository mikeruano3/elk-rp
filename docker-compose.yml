version: '3.9'

services:

  # The 'setup' service runs a one-off script which initializes the
  # 'logstash_internal' and 'kibana_system' users inside Elasticsearch with the
  # values of the passwords defined in the '.env' file.
  #
  # This task is only performed during the *initial* startup of the stack. On all
  # subsequent runs, the service simply returns immediately, without performing
  # any modification to existing users.
  setup:
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - setup:/state:Z
      - generatedcerts:/elkcerts/certs/:z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      FLEET_SERVER_SERVICE_TOKEN: ${FLEET_SERVER_SERVICE_TOKEN:-}
    # privileged: true
    networks:
      - elk

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch:/usr/share/elasticsearch/data:z
      - generatedcerts:/elkcerts/certs/:z
    ports:
      - "9200:9200"
      - "9300:9300"
    # command: tail -F anything
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - elk
    hostname: elasticsearch

  logstash:
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      - generatedcerts:/elkcerts/certs/:z
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    hostname: logstash

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
      - generatedcerts:/elkcerts/certs/:z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      KIBANA_ENCRYPTION_KEY: ${KIBANA_ENCRYPTION_KEY:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    hostname: kibana

  fleet:
    build:
      context: fleet/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION:-}
    healthcheck:
      test: "curl -X GET https://fleet:8220/api/status -k -u elastic:${ELASTIC_PASSWORD} | grep HEALTHY 2>&1 >/dev/null"
      retries: 12
      interval: 5s
    container_name: fleet
    restart: always
    user: root
    environment:
    - FLEET_SERVER_ENABLE=1
    - FLEET_SERVER_ELASTICSEARCH_HOST=https://elasticsearch:9200
    - FLEET_SERVER_ELASTICSEARCH_USERNAME=elastic
    - FLEET_SERVER_ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-}
    - FLEET_SERVER_ELASTICSEARCH_CA=/elkcerts/certs/ca/ca.crt
    - FLEET_URL=https://fleet:8220
    - FLEET_SERVER_PORT=8220
    - FLEET_PORT=8220
    # - FLEET_SERVER_INSECURE_HTTP=1
    - FLEET_SERVER_ES_CA=/elkcerts/certs/ca/ca.crt
    #- FLEET_SERVER_CERT=/elkcerts/certs/elk-server-certs/elk-server-certs.crt
    #- FLEET_SERVER_CERT_KEY=/elkcerts/certs/elk-server-certs/elk-server-certs.key
    - KIBANA_FLEET_SETUP=1
    - KIBANA_FLEET_HOST=https://kibana:5601
    - KIBANA_FLEET_USERNAME=elastic
    - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD:-}
    - KIBANA_FLEET_CA=/elkcerts/certs/ca/ca.crt
    - FLEET_SERVER_POLICY=${FLEET_SERVER_POLICY:-}
    - FLEET_ENROLL=1
    ports:
      - 8220:8220
    networks:
      - elk
    volumes:
      - generatedcerts:/elkcerts/certs/:z
      - ./fleet/config/elastic-agent.yml:/usr/share/elastic-agent/config/elastic-agent.yml:ro,Z
    hostname: fleet

# agent:
#   build:
#     context: elastic-agent-docker/
#     args:
#       ELASTIC_VERSION: ${ELASTIC_VERSION:-}
#   container_name: agent
#   #restart: always
#   user: root 
#   healthcheck:
#     test: "elastic-agent status"
#     retries: 90
#     interval: 1s
#   environment:
#     - FLEET_ENROLLMENT_TOKEN=${FLEET_ENROLLMENT_TOKEN:-}
#     - FLEET_ENROLL=1
#     - FLEET_URL=https://fleet:8220
#     - FLEET_INSECURE=1
#     - FLEET_CA=/elkcerts/certs/ca/ca.crt
#     - ELASTICSEARCH_HOSTS="https://elasticsearch:9200"
#     - ELASTICSEARCH_USERNAME=elastic
#     - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-}
#     - ELASTICSEARCH_CA=/elkcerts/certs/ca/ca.crt
#     - "STATE_PATH=/usr/share/elastic-agent"
#     - KIBANA_FLEET_HOST=https://kibana:5601
#     - KIBANA_FLEET_USERNAME=elastic
#     - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD:-}
#     - KIBANA_FLEET_CA=/elkcerts/certs/ca/ca.crt
#   networks:
#     - elk
#   volumes:
#     - generatedcerts:/elkcerts/certs/:z
#   hostname: agent

networks:
  elk:
    driver: bridge

volumes:
  setup:
  elasticsearch:
  generatedcerts:
